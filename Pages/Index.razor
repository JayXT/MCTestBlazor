@page "/"
@page "/{language}"
@using Microsoft.Extensions.Configuration
@inject HttpClient Http
@inject IConfiguration Configuration

@if(GeneralData != null) 
{
<div class="language">   
     @((MarkupString)GeneralData["Languages"])
</div>
<section class="main">
		<h1 class="headline">@GeneralData["Headline"]</h1>
		<div id="ms-edge-wrapper">
            <table>
				<colgroup>
					<col class="group-col">
					<col class="aspect-col">
					<col class="feature-col">
					<col class="service-col">
					<col class="service-col">
					<col class="service-col">
				</colgroup>
				<thead>
					<tr>
						<th>@GeneralData["Group"]</th>
						<th>@GeneralData["Aspect"]</th>
						<th>@GeneralData["Feature"]</th>
						<th>
							<span class="telegram-icon">@GeneralData["Telegram"]</span>
						</th>
						<th>
							<span class="viber-icon">@GeneralData["Viber"]</span>
						</th>
						<th>
							<span class="whatsapp-icon">@GeneralData["WhatsApp"]</span>
						</th>
					</tr>
				</thead>
                <tbody>
                @if(ComparisonData != null) 
                {
                    MarkupString value = new MarkupString();
                    string score = string.Empty;                    
                    int groupRowspan, aspectRowspan;
                    bool groupWasAdded, aspectWasAdded;

                    foreach(var group in ComparisonData)
                    {                        
                        groupRowspan = GetRowCount(group);
                        groupWasAdded = false;

                        foreach(var aspect in group.Aspects)
                        {
                            aspectRowspan = aspect.Features.Count();
                            aspectWasAdded = false;
                            bool TelegramFeaturesPresent = aspect.AreTelegramFeaturesPresent();
                            bool ViberFeaturesPresent = aspect.AreViberFeaturesPresent();
                            bool WhatsAppFeaturesPresent = aspect.AreWhatsAppFeaturesPresent();

                            foreach(var feature in aspect.Features)
                            {
                                <tr>
                                    @if(!groupWasAdded)
                                    {
                                        <td rowspan="@groupRowspan">
                                            <h3 class="group-text">@group.GroupName</h3>
                                        </td>
                                    }

                                    @if(!aspectWasAdded)
                                    {
                                        <td rowspan="@aspectRowspan">
                                            <h4 class="aspect-text">@aspect.AspectName</h4>
                                        </td>
                                    }
                                    <td>
                                        @feature.FeatureName.ToHtml()
                                    </td>


                                    @if(@feature.Telegram != null) 
                                    {
                                        (score, value) =  @feature.Telegram.GetScoreValue();
                                        <td class="@score">@value</td>
                                    }
                                    else if(TelegramFeaturesPresent && @feature.Telegram == null) 
                                    {
                                        <td class="disadvantage">&#8212;</td>
                                    }
                                    else if(!aspectWasAdded && !TelegramFeaturesPresent && @aspect.Telegram != null)
                                    {
                                        (score, value) =  @aspect.Telegram.GetScoreValue();
                                        <td class="@score" rowspan="@aspectRowspan">@value</td>
                                    }
                                    else if(!aspectWasAdded && !TelegramFeaturesPresent && @aspect.Telegram == null) 
                                    {
                                        <td class="disadvantage" rowspan="@aspectRowspan">&#8212;</td>
                                    }


                                    @if(@feature.Viber != null) 
                                    {
                                        (score, value) = @feature.Viber.GetScoreValue();
                                        <td class="@score">@value</td>
                                    }
                                    else if(ViberFeaturesPresent && @feature.Viber == null) 
                                    {
                                        <td class="disadvantage">&#8212;</td>
                                    }
                                    else if(!aspectWasAdded && !ViberFeaturesPresent && @aspect.Viber != null)
                                    {
                                        (score, value) = @aspect.Viber.GetScoreValue();
                                        <td class="@score" rowspan="@aspectRowspan">@value</td>
                                    }
                                    else if(!aspectWasAdded && !ViberFeaturesPresent && @aspect.Viber == null) 
                                    {
                                        <td class="disadvantage" rowspan="@aspectRowspan">&#8212;</td>
                                    }


                                    @if(@feature.WhatsApp != null) 
                                    {
                                        (score, value) = @feature.WhatsApp.GetScoreValue();
                                        <td class="@score">@value</td>
                                    }
                                    else if(WhatsAppFeaturesPresent && @feature.WhatsApp == null) 
                                    {
                                        <td class="disadvantage">&#8212;</td>
                                    }
                                    else if(!aspectWasAdded && !WhatsAppFeaturesPresent && @aspect.WhatsApp != null)
                                    {
                                        (score, value) = @aspect.WhatsApp.GetScoreValue();
                                        <td class="@score" rowspan="@aspectRowspan">@value</td>
                                    }
                                    else if(!aspectWasAdded && !WhatsAppFeaturesPresent && @aspect.WhatsApp == null) 
                                    {
                                        <td class="disadvantage" rowspan="@aspectRowspan">&#8212;</td>
                                    }

                                    @{groupWasAdded = true;}
                                    @{aspectWasAdded = true;}
                                </tr>
                            }
                        }                        
                    }   
                }                                       
                </tbody>
            </table>
        </div>
        <p class="updated-date">
            @GeneralData["LastModified"]  <br> <br>
            @((MarkupString)GeneralData["Author"].ToHtml())
		</p>
</section>
}

@code 
{
    [Parameter]
    public string Language { get; set; }
    private Dictionary<string, string> GeneralData { get; set; }
    private List<Group> ComparisonData { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshContent();
    }

    protected async Task RefreshContent()
    {
        List<string> allowedLanguages = Configuration["Languages"].Split(',').ToList();
        
        var selectedLanguage =
            (string.IsNullOrEmpty(Language) || !allowedLanguages.Contains(Language))
            ? "ua" : Language;

        var comparisonDataResponse = await Http.GetAsync($"data/{selectedLanguage}/comparison-data.json");
        DateTime lastModifiedDate = comparisonDataResponse.Content.Headers.LastModified.Value.DateTime;

        GeneralData = await Http.GetFromJsonAsync<Dictionary<string, string>>($"data/{selectedLanguage}/general-data.json");
        GeneralData["Languages"] = GetLanguages(allowedLanguages, selectedLanguage);
        GeneralData["LastModified"] = GetLastModified(selectedLanguage, lastModifiedDate);

        ComparisonData = await comparisonDataResponse.Content
                                    .ReadFromJsonAsync<List<Group>>();
    }

    public string GetLanguages(List<string> allowedLanguages, string selectedLanguage)
    {
        var languagesHtml = string.Empty;

        foreach (var l in allowedLanguages)
            if (l == selectedLanguage)
            {
                languagesHtml += $"<h4>{l.ToUpper()}</h4>\n";
            }
            else
            {

                languagesHtml += $"<a href=\"/{l}\">{l.ToUpper()}</a>\n";
            }

        return languagesHtml;
    }

    public string GetLastModified(string language, DateTime lastModifiedDate)
    {
        CultureInfo ci;

        var textPrefix = GeneralData["Updated"];

        switch (language)
        {
            case "en":
                ci = new CultureInfo("en-US");
                return textPrefix + lastModifiedDate.ToString(@"d \o\f MMMM, yyyy", ci);
            case "pt":
                ci = new CultureInfo("pt-BR");
                return textPrefix + lastModifiedDate.ToString(@"d \d\e MMMM \d\e yyyy", ci);
            case "ru":
                ci = new CultureInfo("ru-RU");
                return textPrefix + lastModifiedDate.ToString(@"d MMMM yyyy \г.", ci);
            default:
                ci = new CultureInfo("uk-UA");
                return textPrefix + lastModifiedDate.ToString(@"d MMMM yyyy \р.", ci);
        }
    }

    public int GetRowCount(Group group)
    {
        int rowCount = 0;

        foreach (var aspect in group.Aspects)
            rowCount += aspect.Features.Count();

        return rowCount;
    }
}